////////////////////////////////////////////////////////////////////////////
// 
//   gro 
// 
//   Copyright (c) 2011-2012 Eric Klavins, University of Washington
//   For more information, email klavins@uw.edu
// 
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your option) any later version.
// 
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
// 
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// 
// 

include gro

set ( "dt", 0.1 );

program dilute(m) := {

  gfp := m;

};

program report() := {

  needs gfp;

  selected : { message ( 1, tostring(id) <> ": " <> tostring ( gfp / volume ) ) }

};

program make_gfp ( k1, k2, m ) := {

  gfp := m;

  rate ( k1 ) : { gfp := gfp + 1 }
  rate ( k2 * gfp ) : { gfp := gfp - 1 }

};

program output(delta) := {

  needs gfp;
  p := [ t := 0, s := 0 ];

  true : {
    p.t := p.t + dt,
    p.s := p.s + dt
  }

  p.s >= delta : {
    print ( id, ", ", p.t, ", ", gfp / volume, "\n" ),
    p.s := 0
  }
  
};

// 
// PROGRAM 1
// just dilution, with mouse click events handled
// 
program p1() := dilute(1000) + report() sharing gfp;

// 
// PROGRAM 2
// production and dilution, with mouse click events handled
// 
alpha := - log ( 0.5 ) / 20.0;
k1 := 100 * alpha;
program p2() := make_gfp ( k1, 0.001, 0 ) + report() sharing gfp;

// 
// PROGRAM 3
// production and dilution, with mouse click events handled and data written
// to standard output
// 
program p3() := ( make_gfp ( k1, 0.001, 0 ) + report() sharing gfp ) + output(5*dt) sharing gfp;

ecoli ( [ x := 0, y := 0 ], program p1() ); // try p2() or p3() as well
