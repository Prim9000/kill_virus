////////////////////////////////////////////////////////////////////////////
//
//   gro
//
//   Copyright (c) 2011-2012 Eric Klavins, University of Washington
//   For more information, email klavins@uw.edu
//
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the GNU General Public License
//   as published by the Free Software Foundation; either version 2
//   of the License, or (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
//

include gro

chemostat(true);

set_theme ( bright_theme << [ signals := { { 1, 1, 0 },  { 0, 1, 0 } } ] );

dif := 0.1;
deg := 0.1;

nutrient := { signal ( dif, deg ), signal ( dif, deg ) };

k1 := 1;
k2 := 1;
k3 := 0.1;
k4 := 1;

program p ( i ) := {

  n := 1;
  x := 0;
  y := 0;
  z := 0;
  yfp := 0;
  gfp := 0;

  true : { 

    emit_signal ( i, n ),
    x := get_signal ( 1-i ),
    y := k1 * x / ( k2 + x ),
    n := n + dt*y,
    z := k3 * (n/volume) / ( k4 + (n/volume) ),
    absorb_signal ( 1-i, 500*y ),
    set ( "ecoli_growth_rate", z ),
    n := n - dt*z
  }

  i = 0 : { yfp := 50 * volume * ( 0.5 + n ) }  

  i = 1 : { gfp := 50 * volume * ( 0.5 + n ) }  

  selected : { message ( 1, "n/volume = " <> tostring(n/volume) ) }

  n/volume < 0.0001 : { die() }


};

ecoli ( [ y := -5 ], program p(0) );
ecoli ( [ y := 5 ], program p(1) );
